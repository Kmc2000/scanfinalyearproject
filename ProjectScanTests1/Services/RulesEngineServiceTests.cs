using Microsoft.EntityFrameworkCore;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ProjectScan.Models;
using ProjectScan.Services;
using ProjectScanTests1;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectScan.Services.Tests
{
    [TestClass()]
    public class RulesEngineServiceTests
    {
        [TestMethod()]
        public void ClearDatabaseTest()
        {
            // Setup test db
            using var controller = new InMemoryDBController();
            MalwareScannerContext context = controller.GetContext();
            RulesEngineService rulesEngineService = new RulesEngineService(context);

            // seed test data to clear with tested method
            context.KnownBadYaraRules.Add(new Models.YaraRuleset() { YaraRule = "test", Categorisation = ViralTelemetryCategorisation.Malware });
            context.KnownBadHashes.Add(new Models.KnownMalwareHash() { MalwareHash = new byte[1] {0}, Categorisation = ViralTelemetryCategorisation.Malware });
            context.SaveChanges();

            // Clear db using in memory context
            rulesEngineService.ClearDatabase();;

            // Assert all entries have been cleared from tables.
            Assert.IsTrue(context.KnownBadYaraRules.Count() == 0);
            Assert.IsTrue(context.KnownBadHashes.Count() == 0);

        }

        [TestMethod()]
        public async Task RegisterBlockTest()
        {
            // Setup test db
            using var controller = new InMemoryDBController();
            MalwareScannerContext context = controller.GetContext();

            RulesEngineService rulesEngineService = new RulesEngineService(context);

            // Test data for insertion
            List<KnownMalwareHash> testHashBlock = new List<KnownMalwareHash>();
            testHashBlock.Add(new KnownMalwareHash() { MalwareHash = new byte[2] {0, 0}, Categorisation = ViralTelemetryCategorisation.Malware });
            testHashBlock.Add(new KnownMalwareHash() { MalwareHash = new byte[2] {0, 1}, Categorisation = ViralTelemetryCategorisation.Malware });
            testHashBlock.Add(new KnownMalwareHash() { MalwareHash = new byte[2] {1, 0}, Categorisation = ViralTelemetryCategorisation.Malware });
            testHashBlock.Add(new KnownMalwareHash() { MalwareHash = new byte[2] {1, 1}, Categorisation = ViralTelemetryCategorisation.Malware });

            // Test attempted null insertion
            bool nullInsertionCaught = false;
            try
            {
                await rulesEngineService.RegisterBlock(null);
            }
            catch (InvalidOperationException) 
            {
                nullInsertionCaught = true;
            }

            // Check null insertion was caught and handled
            Assert.IsTrue(nullInsertionCaught);

            // Insert test block
            await rulesEngineService.RegisterBlock(testHashBlock);

            //fetch entries in hash table
            List<KnownMalwareHash> fetchedHashes = context.KnownBadHashes.AsEnumerable<KnownMalwareHash>().ToList();

            // Prune out the id's as these are not contained in test data (id is autogenerated on insertion)
            for(int i = 0; i < fetchedHashes.Count; i++)
            {
                fetchedHashes[i].Id = 0;
            }

            // Compare fetched results with original data.s
            Assert.IsTrue(Enumerable.SequenceEqual(testHashBlock, fetchedHashes));
        }
    }
}
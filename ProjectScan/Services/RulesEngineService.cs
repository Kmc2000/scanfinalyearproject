using Microsoft.EntityFrameworkCore.Internal;
using ProjectScan.Models;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectScan.Services
{
#if DEBUG
    /// <summary>
    /// Internal rules engine for updating the database.
    /// This is, predictably, NOT present in production!
    /// If you leave any references to this interface hanging around in prod, it will break.
    /// For more information, please re-read.
    /// </summary>
    internal class RulesEngineService
    {
        internal void ClearDatabase()
        {
            using (MalwareScannerContext ctx = new())
            {
                //Dump the hashes table.
                ctx.KnownBadHashes.RemoveRange(ctx.KnownBadHashes);
            }
        }

        /// <summary>
        /// TODO: Read all rules from a directory of files.
        /// This should be used by project maintainers to pull new rules from whatever sources
        /// we decide on
        /// </summary>
        /// <param name="filePath"></param>
        internal List<string> LoadRulesFromDirectory(string filePath)
        {
            List<string> rules = new List<string>();

            var files = Directory.GetFiles(filePath);

            foreach(var file in files)
            {
                rules.Add(File.ReadAllText(file));
            }

            var directories = Directory.GetDirectories(filePath);

            foreach(var directory in directories)
            {
                rules.AddRange(LoadRulesFromDirectory(directory));
            }

            return rules;
        }


        /// <summary>
        /// Register a new known "bad" hash into the database.
        /// </summary>
        /// <param name="Hash">The hash of the sample file.</param>
        /// <param name="category">The categorisation of the sample. PUA, malware, etc.</param>
        /// <exception cref="InvalidOperationException"></exception>
        internal async void RegisterHash(byte[] Hash, ViralTelemetryCategorisation category)
        {
            if (Hash == null || Hash.Length <= 0)
            {
                throw new InvalidOperationException();
            }
            KnownMalwareHash ToInsert = new()
            {
                Categorisation = category,
                MalwareHash=Hash
            };
            using(MalwareScannerContext ctx = new())
            {
                ctx.KnownBadHashes.Add(ToInsert);
                await ctx.SaveChangesAsync();
            }
        }

        /// <summary>
        /// Register a YARA rule into the database.
        /// </summary>
        /// <param name="rule">A string representation of a YARA rule.</param>
        /// <param name="category">The classification category assigned to the rule. PUA, malware, etc.</param>
        internal async void RegisterYaraRule(string rule, ViralTelemetryCategorisation category)
        {
            // Prevent empty rules being added to the database.
            if (rule == null || rule.Length <= 0)
            {
                throw new InvalidOperationException();
            }

            // Create rule object for entry, Id autogenerated.
            YaraRuleset ruleset = new()
            {
                YaraRule = rule,
                Categorisation = category
            };

            using(MalwareScannerContext context = new())
            {
                context.KnownBadYaraRules.Add(ruleset);
                await context.SaveChangesAsync();
            }
        }

        /// <summary>
        /// Loads all YARA rules in the local Rules directory and inserts them into the database.
        /// </summary>
        public void InsertRulesToDatabase()
        {
            string path = Directory.GetCurrentDirectory().Replace("\\bin\\Debug\\net6.0-windows", "") + "\\Rules";
            List<string> rules = LoadRulesFromDirectory(path);

            rules.ForEach(rule => RegisterYaraRule(rule, ViralTelemetryCategorisation.Malware));
        }

    }
#endif
}
